// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: token.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createJwtToken = `-- name: CreateJwtToken :exec
INSERT INTO jwt_tokens (jti, user_id, family, created_at, expires_at)
VALUES ($1, $2, $3, $4, $5)
`

type CreateJwtTokenParams struct {
	Jti       string           `json:"jti"`
	UserID    string           `json:"user_id"`
	Family    string           `json:"family"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
	ExpiresAt pgtype.Timestamp `json:"expires_at"`
}

func (q *Queries) CreateJwtToken(ctx context.Context, arg CreateJwtTokenParams) error {
	_, err := q.db.Exec(ctx, createJwtToken,
		arg.Jti,
		arg.UserID,
		arg.Family,
		arg.CreatedAt,
		arg.ExpiresAt,
	)
	return err
}

const deleteJwtTokenByFamily = `-- name: DeleteJwtTokenByFamily :execrows
DELETE FROM jwt_tokens
WHERE family = $1
`

func (q *Queries) DeleteJwtTokenByFamily(ctx context.Context, family string) (int64, error) {
	result, err := q.db.Exec(ctx, deleteJwtTokenByFamily, family)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const deleteJwtTokenByUserIdExcludeFamily = `-- name: DeleteJwtTokenByUserIdExcludeFamily :exec
DELETE FROM jwt_tokens
WHERE user_id = $1 AND family != $2
`

type DeleteJwtTokenByUserIdExcludeFamilyParams struct {
	UserID string `json:"user_id"`
	Family string `json:"family"`
}

func (q *Queries) DeleteJwtTokenByUserIdExcludeFamily(ctx context.Context, arg DeleteJwtTokenByUserIdExcludeFamilyParams) error {
	_, err := q.db.Exec(ctx, deleteJwtTokenByUserIdExcludeFamily, arg.UserID, arg.Family)
	return err
}

const deleteJwtTokensByUserId = `-- name: DeleteJwtTokensByUserId :exec
DELETE FROM jwt_tokens
WHERE user_id = $1
`

func (q *Queries) DeleteJwtTokensByUserId(ctx context.Context, userID string) error {
	_, err := q.db.Exec(ctx, deleteJwtTokensByUserId, userID)
	return err
}

const getJwtTokenByJti = `-- name: GetJwtTokenByJti :one
SELECT jti, family, user_id, is_used, created_at, expires_at
FROM jwt_tokens
WHERE jti = $1
`

func (q *Queries) GetJwtTokenByJti(ctx context.Context, jti string) (JwtToken, error) {
	row := q.db.QueryRow(ctx, getJwtTokenByJti, jti)
	var i JwtToken
	err := row.Scan(
		&i.Jti,
		&i.Family,
		&i.UserID,
		&i.IsUsed,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const useJwtToken = `-- name: UseJwtToken :exec
UPDATE jwt_tokens
SET is_used = TRUE
WHERE jti = $1
`

func (q *Queries) UseJwtToken(ctx context.Context, jti string) error {
	_, err := q.db.Exec(ctx, useJwtToken, jti)
	return err
}
